from cryptography.fernet import Fernet
import os
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinterdnd2 import TkinterDnD, DND_FILES  # Import pentru Drag-and-Drop

# Generare cheie »ôi salvare √Æn fi»ôier
def generate_key():
    key = Fernet.generate_key()
    with open("key.key", "wb") as key_file:
        key_file.write(key)
    messagebox.showinfo("Succes", "Cheia a fost generatƒÉ »ôi salvatƒÉ √Æn 'key.key'.")

# √éncƒÉrcare cheie existentƒÉ
def load_key():
    try:
        with open("key.key", "rb") as key_file:
            return key_file.read()
    except FileNotFoundError:
        messagebox.showerror("Eroare", "Fi»ôierul cu cheia nu existƒÉ! GenereazƒÉ o cheie mai √Ænt√¢i.")
        return None

# Criptare fi»ôier
def encrypt_file(file_path):
    key = load_key()
    if key is None:
        return
    fernet = Fernet(key)

    try:
        with open(file_path, "rb") as file:
            file_data = file.read()
        encrypted_data = fernet.encrypt(file_data)
        encrypted_file_path = file_path + ".enc"

        with open(encrypted_file_path, "wb") as encrypted_file:
            encrypted_file.write(encrypted_data)
        messagebox.showinfo("Succes", f"Fi»ôierul a fost criptat »ôi salvat ca '{encrypted_file_path}'.")
    except FileNotFoundError:
        messagebox.showerror("Eroare", "Fi»ôierul specificat nu existƒÉ!")

# Decriptare fi»ôier
def decrypt_file(file_path):
    key = load_key()
    if key is None:
        return
    fernet = Fernet(key)

    try:
        with open(file_path, "rb") as encrypted_file:
            encrypted_data = encrypted_file.read()
        decrypted_data = fernet.decrypt(encrypted_data)

        original_file_path = file_path.replace(".enc", "_decrypted")
        with open(original_file_path, "wb") as decrypted_file:
            decrypted_file.write(decrypted_data)
        messagebox.showinfo("Succes", f"Fi»ôierul a fost decriptat »ôi salvat ca '{original_file_path}'.")
    except FileNotFoundError:
        messagebox.showerror("Eroare", "Fi»ôierul criptat specificat nu existƒÉ!")
    except Exception as e:
        messagebox.showerror("Eroare", "Decriptarea a e»ôuat! VerificƒÉ cheia sau fi»ôierul.")
        print(e)

# Gestionare Drag-and-Drop
def handle_drag_and_drop(event):
    file_path = event.data.strip()
    file_path = file_path.replace("{", "").replace("}", "")  # √énlƒÉturare acolade pentru Windows
    if not os.path.isfile(file_path):
        messagebox.showerror("Eroare", "Fi»ôier invalid sau inexistent!")
        return

    # Personalizare op»õiuni Criptare / Decriptare
    dialog = tk.Toplevel()
    dialog.title("Alege Ac»õiunea")
    dialog.geometry("300x200")
    tk.Label(dialog, text=f"Fi»ôier selectat:\n{os.path.basename(file_path)}", font=("Arial", 10), wraplength=250).pack(pady=10)

    # Butoane pentru Criptare »ôi Decriptare
    tk.Button(dialog, text="Criptare", width=15, bg="lightgreen", 
              command=lambda: [encrypt_file(file_path), dialog.destroy()]).pack(pady=5)
    tk.Button(dialog, text="Decriptare", width=15, bg="orange", 
              command=lambda: [decrypt_file(file_path), dialog.destroy()]).pack(pady=5)
    tk.Button(dialog, text="Anulare", width=15, bg="red", command=dialog.destroy).pack(pady=5)

    # √éntrerupe execu»õia p√¢nƒÉ la √Ænchiderea dialogului
    dialog.transient(root)
    dialog.grab_set()
    root.wait_window(dialog)

# Interfa»õa principalƒÉ
def main():
    global root
    root = TkinterDnD.Tk()  # Folosim TkinterDnD √Æn loc de tk.Tk
    root.title("Aplica»õie de Criptare »ôi Decriptare a Fi»ôierelor")
    root.geometry("500x300")

    # Elemente UI
    tk.Label(root, text="Trage fi»ôierele √Æn aceastƒÉ fereastrƒÉ sau folose»ôte butoanele:", font=("Arial", 12)).pack(pady=10)

    tk.Button(root, text="GenereazƒÉ Cheie", command=generate_key, width=30, bg="lightblue").pack(pady=5)
    tk.Button(root, text="Ie»ôire", command=root.quit, width=30, bg="red").pack(pady=10)

    # ZonƒÉ pentru Drag-and-Drop
    drop_area = tk.Label(root, text="üìÇ Trage fi»ôiere aici", font=("Arial", 14), fg="blue", bg="lightgray", relief="groove", width=40, height=5)
    drop_area.pack(pady=20)

    # Asociere Drag-and-Drop cu func»õia de gestionare
    drop_area.drop_target_register(DND_FILES)
    drop_area.dnd_bind('<<Drop>>', handle_drag_and_drop)

    root.mainloop() #Bucla principalƒÉ a aplica»õiei ce a»ôteaptƒÉ interac»õiunile utilizatorului

if __name__ == "__main__": #A»ôa ne asigurƒÉm ca main() va fi apelatƒÉ atunci c√¢nd scriptul este executat direct »ôi nu importat ca modul.
    main()

